# a)
# Convert chess board position, like "A1", to a 2D point, like [1, 1].
pos-to-point: (pos :Str -> :Arr) {
    pos .0 str->chars .0 letter!
    pos .1 int number!
    {
        {letter 65 >= letter 72 <= and }{letter 64 -}
        {letter 97 >= letter 104 <= and }{letter 96 -}
        {true}{:Nil}
    }cond

    number_from_letter!

    [number_from_letter number]
} fun

























test-pos-to-point: {
    "a1" pos-to-point [1 1] test=
    "A1" pos-to-point [1 1] test=
    "H8" pos-to-point [8 8] test=
    "B6" pos-to-point [2 6] test=
    "D5" pos-to-point [4 5] test=
    "e7" pos-to-point [5 7] test=
    "I9" pos-to-point [:Nil 9] test=
} fun

 test-pos-to-point

# b)
# Check whether p is a valid chess board position of the Form "[0 2]".
point-valid: (p :Arr -> :Bool) {
    p .0 number_from_letter!
    {
        {number_from_letter :Nil =}{false}
        {number_from_letter 1 <}{false}
        {number_from_letter 8 >}{false}
        {true}{true}
    } cond

    p .1 number!
    {
        {number 1 <}{false}
        {number 8 >}{false}
        {true}{true}
    } cond

    and
} fun

test-point-valid: {
    [1 1] point-valid true test=
    [8 8] point-valid true test=
    [1 8] point-valid true test=
    [8 1] point-valid true test=
    [8 9] point-valid false test=
    [9 8] point-valid false test=
    [2 0] point-valid false test=
    [-1 5] point-valid false test=
    [5 -1] point-valid false test=
} fun

test-point-valid

# c)
# Convert 2D point of the form [1, 1] to a chess board position of the form "A1".
point-to-pos: (a :Arr -> :Str) {
    a point-valid not
    {
        "Invalid position!" println "" # Possible use of err 
    }{
        64 a .0 + char->str
        a .1
        str +
    }if
} fun

test-point-to-pos: {
    [1 1] point-to-pos "A1" test=
    [2 2] point-to-pos "B2" test=
    [4 2] point-to-pos "D2" test=
    [7 1] point-to-pos "G1" test=
    [8 8] point-to-pos "H8" test=
    [3 5] point-to-pos "C5" test=
    [5 3] point-to-pos "E3" test=
    [9 9] point-to-pos "" test=
    # invalid positions crash the program
} fun

test-point-to-pos

# d)
# Computes the possible next positions of the knight (Springer) given its current position.
knight-next-positions: (p :Str -> :Arr) {
    p pos-to-point p!
    p .0 px!
    p .1 py!
    # create all possible positions (some of which may not be on the board)
    [ 
        [px 1 +  py 2 +] 
        [px 2 +  py 1 +] 
        [px 1 +  py 2 -] 
        [px 2 +  py 1 -] 
        [px 1 -  py 2 +] 
        [px 2 -  py 1 +] 
        [px 1 -  py 2 -] 
        [px 2 -  py 1 -] 
    ] a!
    # remove invalid positions (the ones not on the board)
    [a { dup point-valid not {pop} {point-to-pos} if } for] sort
} fun

test-knight-next-positions: {
    "A1" knight-next-positions ["B3", "C2"] test=
    "H8" knight-next-positions ["F7", "G6"] test=
    "H8" knight-next-positions ["F7", "G6"] test= # 2 times same test?
    #"I9" knight-next-positions [] test= # functionality for invalid inputs missing
} fun

test-knight-next-positions

test-stats